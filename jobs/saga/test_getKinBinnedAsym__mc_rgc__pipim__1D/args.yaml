baseoutpath: "out_" #NOTE: This will be prepended to the default output path like so: `<baseoutpath><binscheme_name>.csv`.
inpath: "/RGH_PROJECTIONS_VOL_DIR/jobs/c12analysis/mc_rgc/skim_pipim_*.root"
tree: "t"
nthreads: 1
cuts: "Q2>1 && W>2 && y<0.8 && mx_pipim>1.5 && xF_pi>0.0 && xF_pim>0.0 && TMath::Abs(TMath::ATan2(px_pi,pz_pi))<30.0*TMath::Pi()/180.0 && TMath::Abs(TMath::ATan2(py_pi,pz_pi))<25.0*TMath::Pi()/180.0 && TMath::Abs(TMath::ATan2(px_pim,pz_pim))<30.0*TMath::Pi()/180.0 && TMath::Abs(TMath::ATan2(py_pim,pz_pim))<25.0*TMath::Pi()/180.0 && TMath::Abs(TMath::ATan2(px_e,pz_e))<30.0*TMath::Pi()/180.0 && TMath::Abs(TMath::ATan2(py_e,pz_e))<25.0*TMath::Pi()/180.0"
inject_asym: true
inject_seed: 2
mc_cuts: "sqrt(px_e*px_e+py_e*py_e+pz_e*pz_e)>2.0 && vz_e>-25.0 && vz_e<20.0" #NOTE: This cut is preapplied on data skim but not in MC
sgasyms: [0.1, 0.0, 0.0, 0.0] #NOTE: THESE ARE CURRENTLY UP TO LMAX=0
bgasyms: [0.0, 0.0, 0.0, 0.0]
particle_suffixes: ["_pi","_pim"]
mc_sg_match_name: "mc_sg_match"
mc_sg_match_formula: "(bool)(true)" #NOTE: dtheta and dphi variables are automatically defined for the given particle suffixes.
phi_s_original_name: "phi_s_up" #NOTE: Make sure you specify this variable name here AND in the asymmetry fit variables if you are injecting a transverse target spin dependent asymmetry.
phi_s_original_name_dn: "phi_s_dn" #NOTE: You also need the phi of the negative spin vector
phi_s_injected_name: "phi_s_injected" #NOTE: The asymmetry fit variable with name `phi_s_original_name` will be renamed to this after injection if `phi_s_original_name`!=""
fsgasyms_xs_uu_name: "fsgasyms_xs_uu" #NOTE: Define beam helicity dependent asymmetry terms
fsgasyms_xs_uu_formula: "(float)(0.0)" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Signal asymmetries should be referenced by "sgasyms[index]".
fsgasyms_xs_pu_name: "fsgasyms_xs_pu" #NOTE: Define beam helicity dependent asymmetry terms
fsgasyms_xs_pu_formula: "(float)" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Signal asymmetries should be referenced by "sgasyms[index]".
fsgasyms_xs_up_name: "fsgasyms_xs_up" #NOTE: Define target spin dependent asymmetry terms
fsgasyms_xs_up_formula: "(float)(depol_b*(sin(2*phi_h_pipim)*sgasyms[0]) + depol_v*(sin(phi_h_pipim)*sgasyms[1]))" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Signal asymmetries should be referenced by "sgasyms[index]".
fsgasyms_xs_pp_name: "fsgasyms_xs_pp" #NOTE: Define beam helicity and target spin dependent asymmetry terms
fsgasyms_xs_pp_formula: "(float)(depol_c*(2*sgasyms[2]) + depol_w*(cos(phi_h_pipim)*sgasyms[3]))" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Signal asymmetries should be referenced by "sgasyms[index]".
fbgasyms_xs_pu_name: "fbgasyms_xs_pu" #NOTE: Define beam helicity dependent asymmetry terms
fbgasyms_xs_pu_formula: "(float)0.0" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Background asymmetries should be referenced by "bgasyms[index]".
fbgasyms_xs_up_name: "fbgasyms_xs_up" #NOTE: Define target spin dependent asymmetry terms
fbgasyms_xs_up_formula: "(float)0.0" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Background asymmetries should be referenced by "bgasyms[index]".
fbgasyms_xs_pp_name: "fbgasyms_xs_pp" #NOTE: Define beam helicity and target spin dependent asymmetry terms
fbgasyms_xs_pp_formula: "(float)0.0" #NOTE: Fit and depolarization variables will be converted to their MC counterparts automatically.  Background asymmetries should be referenced by "bgasyms[index]".
combined_spin_state: "ss"
rdf_key_cols: ["run"] #NOTE: These are the variable name used as keys in the RDataFrame for matching CSV column values to events in the ROOT files from `inpath`.
csv_paths: [] #NOTE: You can load additional data, e.g., run depedent target polarizations, from CSV.  These will only be loaded if you specify the CSV paths here.  The length of `run_names` and `col_names` must exactly match the length of this argument if any csv paths are specified.
csv_key_cols: ["Run"] #NOTE: These are the variable name used as keys in the CSV for matching CSV column values to events in the ROOT files from `inpath`.
col_names: [["PbPt"]] #NOTE: You must specify the data to take from the CSV
col_aliases: {} #NOTE: You can optionally specify aliases for the column names in the CSV to avoid potential naming conflicts with existing columns in the `ROOT::RDataFrame`.
helicity_name: "heli"
helicity_formula: "(float)helicity" #NOTE: You just need the target spin here so multiply by beam helicity.
helicity_states:
  plus: 1
  zero: 0
  minus: -1
tspin_name: "tspin"
tspin_formula: "(float)TMath::Sign(1.0,PbPt)"
tspin_states:
  plus: 1
  zero: 0
  minus: -1
htspin_name: "htspin"
htspin_states:
  plus: 1
  zero: 0
  minus: -1
var_formulas: #NOTE: Variable definitions will be applied in order in case of dependencies, and they should follow the form [variable_name,formula].
  - ["phperp2_pipim","(float)(phperp_pipim*phperp_pipim)"]
  - ["theta_p1_pipim","(float)(asin(sintheta_p1_pipim))"]
  - ["theta_p1_pipim_mc","(float)(asin(sintheta_p1_pipim_mc))"]
  - ["gamma","(float)(2.0*0.9383*x/sqrt(Q2))"]
  - ["gamma_mc","(float)(2.0*0.9383*x_mc/sqrt(Q2_mc))"]
  - ["epsilon","(float)((1-y-0.25*y*y*gamma*gamma)/(1-y+0.5*y*y+0.25*y*y*gamma*gamma))"]
  - ["epsilon_mc","(float)((1-y_mc-0.25*y_mc*y_mc*gamma_mc*gamma_mc)/(1-y_mc+0.5*y_mc*y_mc+0.25*y_mc*y_mc*gamma_mc*gamma_mc))"]
  - ["depol_a","(float)(1.0)"]
  - ["depol_a_mc","(float)(1.0)"]
  - ["depol_b","(float)(epsilon)"]
  - ["depol_b_mc","(float)(epsilon_mc)"]
  - ["depol_c","(float)(sqrt(1-epsilon*epsilon)"]
  - ["depol_c_mc","(float)(sqrt(1-epsilon_mc*epsilon_mc))"]
  - ["depol_c","(float)(sqrt(1-epsilon*epsilon)"]
  - ["depol_c_mc","(float)(sqrt(1-epsilon_mc*epsilon_mc))"]
  - ["depol_v","(float)(sqrt(2*epsilon*(1+epsilon)))"]
  - ["depol_v_mc","(float)(sqrt(2*epsilon_mc*(1+epsilon_mc)))"]
  - ["depol_w","(float)(sqrt(2*epsilon*(1-epsilon)))"]
  - ["depol_w_mc","(float)(sqrt(2*epsilon_mc*(1-epsilon_mc)))"]
binschemes: #NOTE: Structure for bin schemes is { binscheme_name: { binvar_name: [binlimits] } }
binschemes_paths: ["/RGH_PROJECTIONS_HOME/yamls/out_1d_bins_pipim.yaml"] #NOTE: You can alternately load a bin scheme from another YAML file if you do not put a map under `binschemes` above.
binvars: ["Q2","y","x","mass_pipim","z_pipim","mx_pipim","phperp_pipim","phperp2_pipim"]
binvar_titles: ["Q2","y","x","M_{#pi^{+}#pi^{-}} (GeV)","z_{#pi^{+}#pi^{-}}","M_{X, #pi^{+}#pi^{-}} (GeV)","P_{#pi^{+}#pi^{-},#perp} (GeV)","P^{2}_{#pi^{+}#pi^{-},#perp} (GeV)"]
binvar_lims: [[1,11],[0,1],[0,1],[0,3],[0,1],[1.5,3.5],[0.0,1.25],[0.0,1.6]]
binvar_bins: [16,16,16,16,16,16,16,16]
depolvars: ["epsilon"]
depolvar_titles: ["#epsilon"]
depolvar_lims: [[0,1]] #NOTE DOUBLE CHECK THESE LIMITS
depolvar_bins: [16]
asymfitvars: ["phi_rt_pipim","theta_p1_pipim"]
asymfitvar_titles: ["#phi_{R_{T}}","#theta_{#pi^{+}#pi^{-}}"]
asymfitvar_lims: [[0,6.2832],[-1.5707,1.5707]]
asymfitvar_bins: [16,16]
massfitvars: []
massfitvar_titles: []
massfitvar_lims: []
massfitvar_bins: []
bpol: 1.0
tpol: 1.0
asymfit_formula_uu: "" #NOTE: Unpolarized AND transverse target spin dependent asymmetries.  Empty formulas are not used. This asymmetry is converted internally to a RooSimultaneous PDF: 1 + A(\vec{x}; \vec{a}; \vec{d}).  Arguments are: x0,x1,x2,...,a0,a1,a2,...,d0,d1,d2,...
asymfit_formula_pu: "" #NOTE: Beam helicity dependent asymmetries. Empty formulas are not used. This asymmetry is converted internally to a RooSimultaneous PDF: 1 + helicity[RooCategory] * pol * A(\vec{x}; \vec{a}; \vec{d}).  Arguments are: x0,x1,x2,...,a0,a1,a2,...,d0,d1,d2,...
asymfit_formula_up: "x[7]*(sin(2*x[1])*x[4]) + sqrt(2*x[7]*(1+x[7]))*(sin(x[1])*x[5])" #NOTE: Target spin dependent asymmetries.  Empty formulas are not used. This asymmetry is converted internally to a RooSimultaneous PDF: 1 + helicity[RooCategory] * pol * A(\vec{x}; \vec{a}; \vec{d}).  Arguments are: x0,x1,x2,...,a0,a1,a2,...,d0,d1,d2,...
asymfit_formula_pp: "sqrt(1-x[7]*x[7])*(2*x[6]) + sqrt(2*x[7]*(1-x[7]))*(cos(x[1])*x[7])" #NOTE: Beam helicity and target spin dependent asymmetries.  Empty formulas are not used. This asymmetry is converted internally to a RooSimultaneous PDF: 1 + helicity[RooCategory] * pol * A(\vec{x}; \vec{a}; \vec{d}).  Arguments are: x0,x1,x2,...,a0,a1,a2,...,d0,d1,d2,...
asymfitpar_inits: [0.1, 0.0, 0.0, 0.0]
asymfitpar_initlims: [[-0.5,0.5],[-0.5,0.5],[-0.5,0.5],[-0.5,0.5]]
use_sumw2error: false
use_average_depol: false #NOTE: Make sure your asymfit_formula_* arguments are correctly set for this option.
use_extended_nll: false
use_binned_fit: false
massfit_yamlfile_map: #NOTE: You can specify a map of bin scheme (string) unique ids to yaml file paths specifying the remaining massfit arguments {`scheme_<scheme_name>_bin_<bin_idx>(__<asymfitvar_bin_idx>)` -> <YAML_PATH> }.
massfit_pdf_name: "" #NOTE: A mass fit and background correction will only be used if this is not empty.
massfit_formula_sg: "" #NOTE: This is parsed by RooGenericPdf using TFormula
massfit_formula_bg: "" #NOTE: This is parsed by RooGenericPdf using TFormula
massfit_sgYield_name: "sgYield"
massfit_bgYield_name: "bgYield"
massfit_initsgfrac: 0.1
massfit_parnames_sg: []
massfit_partitles_sg: []
massfit_parunits_sg: []
massfit_parinits_sg: []
massfit_parlims_sg: []
massfit_parnames_bg: []
massfit_partitles_bg: []
massfit_parunits_bg: []
massfit_parinits_bg: []
massfit_parlims_bg: []
massfit_sgregion_lims: []
massfit_lg_text_size: 0.04
massfit_lg_margin: 0.1
massfit_lg_ncols: 1
massfit_plot_bg_pars: false
massfit_use_sumw2error: false
massfit_use_extended_nll: true
massfit_use_binned_fit: false
use_splot: false
massfit_sgcut: ""
massfit_bgcut: ""
use_sb_subtraction: true
use_binned_sb_bgfracs: false
bgfracvar: "bgfracvar"
bgfracvar_lims: [0.0,1.0]
bgfrac_idx: 0 #NOTE: The index here refers to the formulation of the background fraction from `saga::signal::setBinnedBGFracs()`.
asymfitvar_binschemes: #NOTE: Structure for asymmetry fit variable bin schemes is { binscheme_name: { binvar_name: [binlimits] } }  #NOTE: binscheme_names MUST match those in the binschemes argument!
logpath: "out.txt"
dump_dataset: false
dump_vars: ["heli","tspin","ss","phi_h_pipim","phi_s_injected","depol_a","depol_b","depol_c","depol_v","depol_w","Q2","W","x","y","xF_pipim","phperp2_pipim","phperp_pipim","z_pipim","mx_pipim"]
